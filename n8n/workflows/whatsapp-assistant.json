{
  "name": "WhatsApp Atendimento Inteligente",
  "nodes": [
    {
      "parameters": {},
      "id": "start",
      "name": "Webhook Entrada",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [0, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select prompt_type, content from standard_prompts where business_id = :business_id and locale = coalesce(:locale, 'pt-BR') order by version desc"
      },
      "id": "supabasePrompts",
      "name": "Prompts Padrão",
      "type": "@n8n/n8n-nodes-supabase.supabase",
      "typeVersion": 1,
      "position": [220, 100],
      "credentials": {
        "supabaseApi": "Supabase Service Role"
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select answer, metadata, expires_at from response_cache where business_id = :business_id and locale = coalesce(:locale, 'pt-BR') and question_hash = :question_hash"
      },
      "id": "supabaseCacheRead",
      "name": "Consultar Cache",
      "type": "@n8n/n8n-nodes-supabase.supabase",
      "typeVersion": 1,
      "position": [220, 300],
      "credentials": {
        "supabaseApi": "Supabase Service Role"
      }
    },
    {
      "parameters": {
        "functionCode": "const prompts = items[0].json['Prompts Padrão'];\nconst cacheRows = items[0].json['Consultar Cache'];\nconst incomingMessage = items[0].json.body?.message ?? '';\nconst businessId = items[0].json.body?.business_id;\nconst locale = items[0].json.body?.locale ?? 'pt-BR';\n\nconst promptMap = {};\nif (Array.isArray(prompts)) {\n  for (const entry of prompts) {\n    if (!promptMap[entry.prompt_type]) {\n      promptMap[entry.prompt_type] = entry.content;\n    }\n  }\n}\n\nconst catalogFallback = {\n  categories: [\n    {\n      name: 'Catálogo indisponível',\n      items: [\n        {\n          name: 'Assistente em treinamento',\n          description: 'Ainda não temos produtos cadastrados. Solicite informações adicionais.',\n          price: null\n        }\n      ]\n    }\n  ],\n  out_of_stock_message: 'Ainda não há itens cadastrados. Deseja falar com um atendente humano?'\n};\n\nconst hasCatalog = Array.isArray(promptMap.catalog?.categories) && promptMap.catalog.categories.length > 0;\nconst promptContext = {\n  system: `Você é um atendente da marca. Persona: ${promptMap.brand_voice?.persona ?? 'Atendente prestativo'}. Tom: ${promptMap.brand_voice?.tone ?? 'Amigável'}.`,\n  instructions: {\n    greeting: promptMap.brand_voice?.greeting ?? 'Olá! Como posso ajudar?',\n    signature: promptMap.brand_voice?.signature ?? 'Equipe de atendimento'\n  },\n  catalog: hasCatalog ? promptMap.catalog : catalogFallback,\n  faqs: promptMap.faqs?.items ?? []\n};\n\nconst crypto = require('crypto');\nconst questionHash = crypto.createHash('sha256').update(incomingMessage.trim().toLowerCase()).digest('hex');\n\nreturn [{\n  json: {\n    incomingMessage,\n    promptContext,\n    questionHash,\n    businessId,\n    locale,\n    cacheHit: Array.isArray(cacheRows) && cacheRows.length > 0 ? cacheRows[0] : null\n  }\n}];"
      },
      "id": "prepareContext",
      "name": "Preparar Contexto",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [420, 120]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{$json.cacheHit?.answer}}",
              "value2": "",
              "operation": "notEmpty"
            }
          ]
        }
      },
      "id": "ifCacheHit",
      "name": "Cache encontrado?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [620, 300]
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "systemMessage": "={{$json.promptContext.system}}",
        "temperature": 0.7,
        "messages": [
          {
            "text": "={{$json.promptContext.instructions.greeting}}",
            "role": "assistant"
          },
          {
            "text": "={{$json.incomingMessage}}",
            "role": "user"
          }
        ],
        "additionalFields": {
          "context": "={{$json.promptContext}}"
        }
      },
      "id": "openAI",
      "name": "Gerar Resposta",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 3,
      "position": [820, 120],
      "credentials": {
        "openAiApi": "OpenAI"
      }
    },
    {
      "parameters": {
        "functionCode": "const { json } = items[0];\nif (json.cacheHit) {\n  return [{ json: { reply: json.cacheHit.answer, source: 'cache' } }];\n}\n\nconst openAiItem = $items('Gerar Resposta')[0].json;\nconst usage = openAiItem.usage ?? {};\nconst costPrompt = (usage.prompt_tokens / 1000) * 0.003;\nconst costCompletion = (usage.completion_tokens / 1000) * 0.004;\nconst costUsd = Number((costPrompt + costCompletion).toFixed(6));\n\nconst cachePayload = [{\n  business_id: json.businessId,\n  locale: json.locale,\n  question: json.incomingMessage,\n  question_hash: json.questionHash,\n  answer: openAiItem.text ?? openAiItem.response,\n  metadata: openAiItem.usage ?? {},\n  expires_at: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString()\n}];\n\nconst sessionUsage = [{\n  session_id: $json.body?.session_id ?? $json.headers['x-session-id'] ?? $now(),\n  business_id: json.businessId,\n  model: 'gpt-4.1-mini',\n  prompt_tokens: usage.prompt_tokens ?? 0,\n  completion_tokens: usage.completion_tokens ?? 0,\n  cost_usd: costUsd,\n  currency: 'USD',\n  metadata: openAiItem.usage ?? {}\n}];\n\nreturn [{\n  json: {\n    reply: openAiItem.text ?? openAiItem.response,\n    source: 'llm',\n    cachePayload,\n    sessionUsage\n  }\n}];"
      },
      "id": "buildResponse",
      "name": "Montar Resposta",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1020, 220]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "response_cache",
        "columns": "business_id, locale, question, question_hash, answer, metadata, expires_at",
        "values": "={{$json.cachePayload}}",
        "updateOnConflict": true,
        "conflictColumn": "question_hash"
      },
      "id": "supabaseCacheWrite",
      "name": "Atualizar Cache",
      "type": "@n8n/n8n-nodes-supabase.supabase",
      "typeVersion": 1,
      "position": [1240, 140],
      "credentials": {
        "supabaseApi": "Supabase Service Role"
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "session_usage",
        "columns": "session_id, business_id, model, prompt_tokens, completion_tokens, cost_usd, currency, metadata",
        "values": "={{$json.sessionUsage}}"
      },
      "id": "supabaseUsage",
      "name": "Registrar Custo",
      "type": "@n8n/n8n-nodes-supabase.supabase",
      "typeVersion": 1,
      "position": [1240, 300],
      "credentials": {
        "supabaseApi": "Supabase Service Role"
      }
    },
    {
      "parameters": {},
      "id": "webhookResponse",
      "name": "Retornar ao WhatsApp",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1460, 220]
    }
  ],
  "connections": {
    "Webhook Entrada": {
      "main": [
        [
          {
            "node": "Prompts Padrão",
            "type": "main",
            "index": 0
          },
          {
            "node": "Consultar Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompts Padrão": {
      "main": [
        [
          {
            "node": "Preparar Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar Cache": {
      "main": [
        [
          {
            "node": "Preparar Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Contexto": {
      "main": [
        [
          {
            "node": "Cache encontrado?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache encontrado?": {
      "main": [
        [
          {
            "node": "Montar Resposta",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gerar Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gerar Resposta": {
      "main": [
        [
          {
            "node": "Montar Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Montar Resposta": {
      "main": [
        [
          {
            "node": "Atualizar Cache",
            "type": "main",
            "index": 0
          },
          {
            "node": "Registrar Custo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Atualizar Cache": {
      "main": [
        [
          {
            "node": "Retornar ao WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registrar Custo": {
      "main": [
        [
          {
            "node": "Retornar ao WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false
}
