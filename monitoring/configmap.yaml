apiVersion: v1
kind: ConfigMap
metadata:
  name: evolution-monitoring
  labels:
    app: monitoring
    component: evolution
binaryData: {}
data:
  evolution_health_check.py: |
    #!/usr/bin/env python3
    """Verifica a saúde da Evolution API e alerta o Slack em caso de falhas."""
    
    from __future__ import annotations
    
    import json
    import os
    import sys
    import time
    from datetime import datetime, timezone
    from typing import Any, Dict
    
    import requests
    
    DEFAULT_TIMEOUT = float(os.getenv("HEALTHCHECK_TIMEOUT", "10"))
    SLACK_WEBHOOK = os.getenv("SLACK_WEBHOOK_URL")
    EVOLUTION_HEALTH_URL = os.getenv("EVOLUTION_HEALTH_URL", "https://evolution-api.internal/api/health")
    EXPECTED_STATUS = int(os.getenv("EVOLUTION_HEALTH_EXPECTED_STATUS", "200"))
    ALLOWED_LATENCY = float(os.getenv("EVOLUTION_HEALTH_MAX_LATENCY", "1.5"))
    
    
    def _build_payload(status_code: int, latency: float, ok: bool, details: Dict[str, Any]) -> Dict[str, Any]:
        timestamp = datetime.now(timezone.utc).isoformat()
        color = "#2eb886" if ok else "#ff0000"
        return {
            "attachments": [
                {
                    "color": color,
                    "title": "Evolution API health-check",
                    "ts": int(time.time()),
                    "fields": [
                        {"title": "Status", "value": str(status_code), "short": True},
                        {"title": "Latency", "value": f"{latency:.3f}s", "short": True},
                        {
                            "title": "Timestamp",
                            "value": timestamp,
                            "short": False,
                        },
                        {
                            "title": "Details",
                            "value": json.dumps(details)[:2000],
                            "short": False,
                        },
                    ],
                }
            ]
        }
    
    
    def notify_slack(payload: Dict[str, Any]) -> None:
        if not SLACK_WEBHOOK:
            print("Slack webhook não configurado; apenas registrando payload", file=sys.stderr)
            print(json.dumps(payload, indent=2), file=sys.stderr)
            return
    
        response = requests.post(SLACK_WEBHOOK, json=payload, timeout=DEFAULT_TIMEOUT)
        response.raise_for_status()
    
    
    def run_health_check() -> int:
        start = time.perf_counter()
        try:
            response = requests.get(EVOLUTION_HEALTH_URL, timeout=DEFAULT_TIMEOUT)
            latency = time.perf_counter() - start
            details: Dict[str, Any] = {}
    
            try:
                details = response.json()
            except ValueError:
                details = {"body": response.text[:500]}
    
            ok = response.status_code == EXPECTED_STATUS and latency <= ALLOWED_LATENCY
            payload = _build_payload(response.status_code, latency, ok, details)
    
            if not ok:
                notify_slack(payload)
            else:
                print(json.dumps({"status": response.status_code, "latency": latency, "details": details}))
            return 0 if ok else 1
        except requests.RequestException as exc:  # pragma: no cover - rede externa
            latency = time.perf_counter() - start
            payload = _build_payload(0, latency, False, {"error": str(exc)})
            notify_slack(payload)
            return 2
    
    
    if __name__ == "__main__":
        sys.exit(run_health_check())
  requirements.txt: |
    requests>=2.31.0
